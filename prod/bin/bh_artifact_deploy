#!/usr/bin/python3

import argparse
import shutil
import subprocess
from html.parser import HTMLParser
from pathlib import Path, PurePath
from zipfile import ZipFile

import requests

SERVER_STATUS_URL = "https://bughouse.pro/dyn/server"
SERVER_SERVICE_NAME = "bughouse-server"
HOME = Path.home()
SERVER_BINARY_ROOT = HOME / "server"
SERVER_BINARY_FILE = SERVER_BINARY_ROOT / "bughouse_console"
ARTIFACT_CLIENT_PREFIX = PurePath("www-dist")
WEB_CLIENT_PATH = Path("/var/www/html")


class HTMLTextExtractor(HTMLParser):
    text = ""

    def handle_data(self, data):
        self.text += data

    def handle_endtag(self, name):
        if name in ["br", "p"]:
            self.text += "\n"


def ask_confirmation(message: str) -> bool:
    while True:
        ret = input(message + " (y/n): ").strip().lower()
        if ret in ["y", "yes"]:
            return True
        if ret in ["n", "no"]:
            return False


def extract_html_text(html: str) -> str:
    extractor = HTMLTextExtractor()
    extractor.feed(html)
    return extractor.text


def pad_text(text: str, padding: str) -> str:
    return "\n".join([padding + s for s in text.splitlines()])


parser = argparse.ArgumentParser()
parser.add_argument("artifacts_file", help="Path to the artifacts file")
args = parser.parse_args()

response = requests.get(SERVER_STATUS_URL)
response.raise_for_status()
print(f"{SERVER_STATUS_URL} returned:")
print(pad_text(extract_html_text(response.text), "  "))

if not ask_confirmation("Continue?"):
    exit()

print(f"Stopping {SERVER_SERVICE_NAME} service...")
subprocess.run(["systemctl", "stop", SERVER_SERVICE_NAME])
print("Stopped")

with ZipFile(args.artifacts_file) as zip:
    if WEB_CLIENT_PATH.exists():
        shutil.rmtree(WEB_CLIENT_PATH)
    WEB_CLIENT_PATH.mkdir(parents=True, exist_ok=True)
    SERVER_BINARY_ROOT.mkdir(parents=True, exist_ok=True)
    for file in zip.namelist():
        zip_path = PurePath(file)
        if zip_path.is_relative_to(ARTIFACT_CLIENT_PREFIX):
            target_path = WEB_CLIENT_PATH / zip_path.relative_to(ARTIFACT_CLIENT_PREFIX)
            target_path.parent.mkdir(parents=True, exist_ok=True)
            target_path.write_bytes(zip.read(file))
    print(f"Extracted web client to {WEB_CLIENT_PATH}")
    SERVER_BINARY_FILE.write_bytes(zip.read("bughouse_console"))
    SERVER_BINARY_FILE.chmod(0o755)
    print(f"Extracted server binary to {SERVER_BINARY_FILE}")

print(f"Starting {SERVER_SERVICE_NAME} service...")
subprocess.run(["systemctl", "start", SERVER_SERVICE_NAME])
print("Started")
