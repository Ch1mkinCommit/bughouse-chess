body {
  --sq-size-primary: min(5vw, 9vh);
  --sq-size-secondary: calc(var(--sq-size-primary) / 1.5);
  --board-size-secondary: calc(var(--sq-size-secondary) * 8);
  --reserve-height-in-squares: 1.5;

  --color-chalk-myself: #2b7b00;
  --color-chalk-partner: #048ea2;
  --color-chalk-opponent: #d12727;
  --color-chalk-diagonal: #9a118b;
  --color-chalk-other: #404040;
  --color-chalk-other-light: #808080;
}
body.observer {
  --sq-size-primary: min(4.4vw, 7.8vh);
  --sq-size-secondary: var(--sq-size-primary);
}

html, body {
  height: 100%;
  width: 100%;
  overflow: hidden;  /* disable scroll bars */
}
html {
  display: table;
  margin: auto;
}
body {
  background-color: #1c3a0c;
  color: #e0e0e0;
  font-family: Verdana, sans-serif;
  font-size: max(calc(var(--sq-size-primary) * 0.25), 6pt);
  display: table-cell;
  vertical-align: middle;
}
body.observer {
  background-color: #333333;
}
body.active-player {
  background: radial-gradient(circle farthest-corner, #1c3a0c 90%, #295313 100%);
  background-attachment: fixed;
}

svg {
  overflow: visible;  /* allow shadows outside of svg area */
}

#page {
  display: grid;
  grid-template-areas:
    "      .         .  prim-rsrv-top     .           .         .        .       "
    "      .         .  prim-rsrv-top     .      scnd-rsrv-top  .        .       "
    "prim-name-top   .  prim-rsrv-top     .      scnd-rsrv-top  .   scnd-name-top"
    "prim-clock-top  .   prim-board       .       scnd-board    .  scnd-clock-top"
    "      .         .   prim-board       .       scnd-board    .        .       "
    "      .         .   prim-board    scr-team   scnd-board    .        .       "
    "      .         .   prim-board       .       scnd-board    .        .       "
    "      .         .   prim-board       .       scnd-board    .  scnd-clock-bot"
    "      .         .   prim-board       .      scnd-rsrv-bot  .   scnd-name-bot"
    "      .         .   prim-board       .      scnd-rsrv-bot  .        .       "
    "      .         .   prim-board       .          info       .  scr-individual"
    "prim-clock-bot  .   prim-board       .          info       .  scr-individual"
    "prim-clock-bot  .   prim-board       .         command     .  scr-individual"
    "prim-name-bot   .  prim-rsrv-bot     .           .         .  scr-individual"
    "      .         .  prim-rsrv-bot     .           .         .  scr-individual"
  ;
  grid-template-columns:
    minmax(3em, 1fr)
    calc(var(--sq-size-primary) * 0.4)
    auto
    calc(var(--sq-size-primary) * 1.2)
    auto
    calc(var(--sq-size-primary) * 0.4)
    minmax(3em, 1fr)
  ;
  grid-template-rows:
    repeat(10, auto)
    1fr
    repeat(4, auto)
  ;
}

body.observer #page {
  display: grid;
  grid-template-areas:
    "      .         .  prim-rsrv-top     .      scnd-rsrv-top  .        .       "
    "prim-name-top   .  prim-rsrv-top     .      scnd-rsrv-top  .   scnd-name-top"
    "prim-clock-top  .   prim-board       .       scnd-board    .  scnd-clock-top"
    "      .         .   prim-board       .       scnd-board    .        .       "
    "      .         .   prim-board    scr-team   scnd-board    .        .       "
    "      .         .   prim-board       .       scnd-board    .        .       "
    "prim-clock-bot  .   prim-board       .       scnd-board    .  scnd-clock-bot"
    "prim-name-bot   .  prim-rsrv-bot     .      scnd-rsrv-bot  .   scnd-name-bot"
    "      .         .  prim-rsrv-bot     .      scnd-rsrv-bot  .  scr-individual"
    "      .         .      info          .        command      .  scr-individual"
    "      .         .      info          .           .         .  scr-individual"
  ;
  grid-template-columns:
    minmax(3em, 1fr)
    calc(var(--sq-size-primary) * 0.4)
    auto
    calc(var(--sq-size-primary) * 1.2)
    auto
    calc(var(--sq-size-primary) * 0.4)
    minmax(3em, 1fr)
  ;
  grid-template-rows:
    repeat(10, auto)
    1fr
  ;
}

#board-primary { grid-area: prim-board; }
#reserve-primary-top { grid-area: prim-rsrv-top; }
#reserve-primary-bottom { grid-area: prim-rsrv-bot; }
#player-name-primary-top { grid-area: prim-name-top; }
#player-name-primary-bottom { grid-area: prim-name-bot; }
#clock-container-primary-top { grid-area: prim-clock-top; }
#clock-container-primary-bottom { grid-area: prim-clock-bot; }

#score-team { grid-area: scr-team; }
#score-container-individual { grid-area: scr-individual; }

#board-secondary { grid-area: scnd-board; }
#reserve-secondary-top { grid-area: scnd-rsrv-top; }
#reserve-secondary-bottom { grid-area: scnd-rsrv-bot; }
#player-name-secondary-top { grid-area: scnd-name-top; }
#player-name-secondary-bottom { grid-area: scnd-name-bot; }
#clock-container-secondary-top { grid-area: scnd-clock-top; }
#clock-container-secondary-bottom { grid-area: scnd-clock-bot; }

#info-string-container { grid-area: info; }
#command-panel { grid-area: command; }

.board-shadow {
  fill: #808080;
  stroke: none;
  filter: url(#board-shadow);
}
.board-border {
  fill: none;
  stroke: #000000;
  stroke-width: 0.02;
}

.sq-black {
  fill: #e59349;
}
.sq-white {
  fill: #dfceb4;
}

.on-sq-black {
  fill: #dfceb4;
  font: normal 0.25px sans-serif;
}
.on-sq-white {
  fill: #e59349;
  font: normal 0.25px sans-serif;
}

#latest-primary-turn-from,
#latest-primary-turn-from-extra,
#latest-secondary-turn-from,
#latest-secondary-turn-from-extra {
  fill: #acbd38;
  opacity: 0.5;
}
#latest-primary-drop-to,
#latest-primary-turn-to,
#latest-primary-turn-to-extra,
#latest-secondary-drop-to,
#latest-secondary-turn-to,
#latest-secondary-turn-to-extra {
  fill: #a7c000;
  opacity: 0.5;
}

#pre-turn-from,
#pre-turn-from-extra {
  fill: #7238bd;
  opacity: 0.5;
}
#pre-drop-to,
#pre-turn-to,
#pre-turn-to-extra {
  fill: #5800c0;
  opacity: 0.5;
}

#latest-primary-capture,
#latest-secondary-capture {
  fill: #4dcc7d;
  opacity: 0.5;
}

#drag-start-highlight {
  fill: url(#drag-start-gradient);
}
#drag-over-highlight {
  fill: url(#drag-over-gradient);
}

.draggable {
  cursor: grab;
}
.draggable.dragged {
  cursor: grabbing;
}

.chalk-arrow {
  fill: none;
  stroke-width: 0.25;
  stroke-linecap: butt;
  opacity: 0.6;
  pointer-events: none;
}
.chalk-freehand-line {
  fill: none;
  stroke-width: 0.15;
  stroke-linejoin: round;
  stroke-linecap: round;
  opacity: 0.6;
  pointer-events: none;
}
.chalk-square-highlight {
  stroke: none;
  opacity: 1.0;
  pointer-events: none;
}

.chalk-line-myself { stroke: var(--color-chalk-myself); }
.chalk-line-partner { stroke: var(--color-chalk-partner); }
.chalk-line-opponent { stroke: var(--color-chalk-opponent); }
.chalk-line-diagonal { stroke: var(--color-chalk-diagonal); }
.chalk-line-other { stroke: var(--color-chalk-other); }

.chalk-arrow.chalk-line-myself { marker-end: url(#arrowhead-myself); }
.chalk-arrow.chalk-line-partner { marker-end: url(#arrowhead-partner); }
.chalk-arrow.chalk-line-opponent { marker-end: url(#arrowhead-opponent); }
.chalk-arrow.chalk-line-diagonal { marker-end: url(#arrowhead-diagonal); }
.chalk-arrow.chalk-line-other { marker-end: url(#arrowhead-other); }

.chalk-square-myself { fill: var(--color-chalk-myself); }
.chalk-square-partner { fill: var(--color-chalk-partner); }
.chalk-square-opponent { fill: var(--color-chalk-opponent); }
.chalk-square-diagonal { fill: var(--color-chalk-diagonal); }
.chalk-square-other { fill: var(--color-chalk-other-light); }

#arrowhead-myself { fill: var(--color-chalk-myself); }
#arrowhead-partner { fill: var(--color-chalk-partner); }
#arrowhead-opponent { fill: var(--color-chalk-opponent); }
#arrowhead-diagonal { fill: var(--color-chalk-diagonal); }
#arrowhead-other { fill: var(--color-chalk-other); }

#board-primary {
  width: calc(var(--sq-size-primary) * 8);
  height: calc(var(--sq-size-primary) * 8);
  user-select: none;
  touch-action: none;
  z-index: 10;  /* show dragged pieces above other UI elements */
}
#board-secondary {
  width: calc(var(--sq-size-secondary) * 8);
  height: calc(var(--sq-size-secondary) * 8);
  user-select: none;
}
#reserve-primary-top,
#reserve-primary-bottom {
  width: calc(var(--sq-size-primary) * 8);
  height: calc(var(--sq-size-primary) * 1.5);
  user-select: none;
  touch-action: none;
}
#reserve-secondary-top,
#reserve-secondary-bottom {
  width: calc(var(--sq-size-secondary) * 8);
  height: calc(var(--sq-size-secondary) * 1.5);
  user-select: none;
}
.reserve {
  filter: url(#reserve-shadow);
}
body.observer .reserve {
  filter: url(#reserve-shadow-gray);
}

#player-name-primary-top,
#player-name-primary-bottom {
  text-align: right;
}
#player-name-secondary-top,
#player-name-secondary-bottom {
  text-align: left;
}
.player-name {
  font-size: 110%;
  color: #a4b984;
  padding: calc(var(--sq-size-primary) * 0.1) 0;
}
body.observer .player-name {
  color: #b2b2b2;
}
#score-team,
#score-individual {
  color: #7fb5a1;
}
#score-team {
  text-align: center;
  white-space: pre;
}
#score-container-individual {
  display: flex;
  flex-direction: row;
}
#score-individual {
  white-space: pre;
  border-top: 0.2em solid #7fb5a1;
  padding: 0.5em 0;
}

.clock {
  font-family: Monaco, monospace;
  font-size: 180%;
  text-align: center;
  white-space: nowrap;
  min-width: 3em;
  display: inline-block;
  border-radius: calc(var(--sq-size-primary) * 0.2);
  padding: calc(var(--sq-size-primary) * 0.05) calc(var(--sq-size-primary) * 0.1);
  margin: calc(var(--sq-size-primary) * 0.2)  0;
}
.clock-inactive {
  color: #909090;
  background-color: #28351f;
  outline: calc(var(--sq-size-primary) * 0.03) solid #74935f;
}
.clock-active {
  font-weight: bold;
  color: #f0f0f0;
  background-color: #1f5800;
  outline: calc(var(--sq-size-primary) * 0.1) outset #63ba25;
}
.clock-active.clock-low-time {
  font-weight: bold;
  color: #f0f0f0;
  background-color: #435700;
  outline: calc(var(--sq-size-primary) * 0.1) outset #ddd712;
}
.clock-flag {
  font-weight: bold;
  color: #909090;
  background-color: #691400;
  outline: calc(var(--sq-size-primary) * 0.1) solid #bf0000;
}
body.observer .clock-inactive {
  background-color: #2a2a2a;
  outline-color: #8a8a8a;
}
body.observer .clock-active {
  background-color: #345423;
  outline-color: #85b363;
}
body.observer .clock-active.clock-low-time {
  background-color: #4a5616;
  outline-color: #dad26e;
}


#clock-container-primary-top,
#clock-container-primary-bottom {
  text-align: right;
  padding: calc(var(--sq-size-primary) * 0.1) 0;
}
#clock-container-secondary-top,
#clock-container-secondary-bottom {
  text-align: left;
  padding: calc(var(--sq-size-primary) * 0.1) 0;
}

#info-string-container {
  flex: 1;
  margin-bottom: 0.5em;
  position: relative;
}
#info-string {
  font-size: 90%;
  white-space: pre-line;
  position: absolute;
  bottom: 0;
  left: 0;
  /* Note: `z-index` and `background-color` are a "solution" for info-string text overflow. */
  z-index: 1;
  background-color: #1c3a0c80;
}
body.observer #info-string {
  top: 0;
  bottom: auto;
  background-color: #33333380;
}
#command {
  flex-grow: 1;
  box-sizing: border-box;
  background-color: #8ea36e;
  font-size: 1em;
}
body.observer #command {
  background-color: #9a9a9a;
}

#command-panel {
  width: max(var(--board-size-secondary), 6em);
  display: flex;
  flex-direction: row;
  gap: calc(var(--sq-size-primary) * 0.1);
}

#project-info {
  position: absolute;
  bottom: 0.5em;
  right: 0.5em;
  text-align: right;
  font-size: 60%;
  color: #ffffff60;
}
#project-info a {
  color: #ffffff60;
}

dialog {
  background-color: #dfceb4;
  font-size: max(1em, 8pt);
  padding: 0.6em 1em;
}

dialog::backdrop {
  background: #000000a0;
}

.menu-page-body {
  display: grid;
  grid-template-columns: auto auto;
}

label {
  display: flex;
  align-items: center;
  /* Note: prefer padding over `column-gap`, because this way the entire line is clickable. */
  padding-right: 1em;
}

.dialog-button-container {
  width: 100%;
  text-align: center;
}

dialog button {
  display: inline-block;
  padding: 0.5em 1em;
  margin: 0.4em 0em;
  width: 14em;
  border: 0;
  font-size: 1.3em;
  text-align: center;
  color: #101010;
  text-shadow: 0.05em 0.05em 0.05em #eaac73;
  border-radius: 0.5em;
  background-color: #e59f5f;
  background-image: linear-gradient(to top left,
                                    rgba(0, 0, 0, 0.1),
                                    rgba(0, 0, 0, 0.1) 30%,
                                    rgba(0, 0, 0, 0));
  box-shadow: inset 2px 2px 3px rgba(255, 255, 255, .6),
              inset -2px -2px 3px rgba(0, 0, 0, .6);
}
dialog button:hover {
  background-color: #eaac73;
}
dialog button:active {
  box-shadow: inset -2px -2px 3px rgba(255, 255, 255, .6),
              inset 2px 2px 3px rgba(0, 0, 0, .6);
}

.back-button {
  padding: 0;
  margin: 0.8em 0em;
  height: 2em;
  width: 2em;
  font-size: 1em;
  text-shadow: none;
  border-radius: 0.3em;
  background-color: #eed5ae;
}
.back-button:hover {
  background-color: #f3debd;
}

dialog select, dialog input {
  display: block;
  box-sizing: border-box;
  padding: 0.3em 1em;
  margin: 0.4em 0em;
  width: 100%;
  font-size: 1.1em;
  border-width: 1px;
  border-color: #808080;
  border-radius: 0.2em;
  background-color: #f0e8dc;
}

/* The point of `:not(:placeholder-shown)` is to not make the cursor red if the input field is blank.
   Here `:placeholder-shown` is an emptiness marker. Could switch to `:blank` if it's standardized. */
dialog input:invalid:not(:placeholder-shown) {
  color: red;
}

#join-contest-id:not(:placeholder-shown) {
  /* This is of course a purely visual change. Actual input should be uppercased in JS. */
  text-transform: uppercase;
}

.icon-button {
  box-sizing: border-box;
  padding: 0;
  border: none;
  border-radius: calc(var(--sq-size-primary) * 0.1);  /* for hover hightlight */
  background-color: transparent;
  width: calc(var(--sq-size-primary) * 0.4);
  height: calc(var(--sq-size-primary) * 0.4);
  cursor: pointer;
}
.icon-button:hover {
  background-color: #ffffff30;
}
.icon-button:active {
  background-color: #ffffff50;
}

.icon-button-svg {
  fill: #ffffff;
}
.icon-button-svg:active {
  fill: #ceffb4;
}
